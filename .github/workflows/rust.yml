name: build

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always
  RUST_MIN_STACK: 16777212

jobs:
  build:
    strategy:
      matrix:
        platform: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - platform: ubuntu-latest
            artifact-path: target/release/fend
            artifact-platform-name: linux-x64
            env-command: ">> $GITHUB_ENV"
          - platform: macos-latest
            artifact-path: target/release/fend
            artifact-platform-name: macos-x64
            env-command: ">> $GITHUB_ENV"
          - platform: windows-latest
            artifact-path: target/release/fend.exe
            artifact-platform-name: windows-x64
            env-command: "| Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append"

    runs-on: ${{ matrix.platform }}

    timeout-minutes: 10

    steps:
    - uses: actions/checkout@v2
    - name: Update Rust
      run: rustup update
    - name: Clippy
      if: ${{ matrix.platform == 'ubuntu-latest' }}
      run: |
        rustup component add clippy
        cargo clippy --workspace --all-targets --all-features -- -D warnings
    - name: Check format
      if: ${{ matrix.platform == 'ubuntu-latest' }}
      run: cargo fmt -- --check
    - name: Build
      run: cargo build --release --workspace
    - name: Get version
      run: echo "FEND_VERSION=$(./${{ matrix.artifact-path }} --version)" ${{ matrix.env-command }}
    - name: Run tests
      run: cargo test -q --workspace -- --nocapture
    - name: Upload artifacts
      uses: actions/upload-artifact@v2
      if: ${{ github.ref == 'refs/heads/main' }}
      with:
        name: fend-${{ env.FEND_VERSION }}-${{ matrix.artifact-platform-name }}
        path: ${{ matrix.artifact-path }}
        if-no-files-found: error
    - name: Build fend-wasm
      if: ${{ github.ref == 'refs/heads/main' && matrix.platform == 'ubuntu-latest' }}
      run: |
        curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh
        (cd wasm && wasm-pack build --target no-modules --out-dir ../web/pkg)
        rm web/pkg/.gitignore
    - name: Deploy to GitHub Pages
      if: ${{ github.ref == 'refs/heads/main' && matrix.platform == 'ubuntu-latest' }}
      uses: peaceiris/actions-gh-pages@v3
      with:
        personal_token: ${{ secrets.MY_TOKEN }}
        publish_dir: ./web
        external_repository: printfn/fend-website
        force_orphan: true
        cname: fend.printfn.nz
    - name: Code coverage
      if: ${{ matrix.platform == 'ubuntu-latest' }}
      run: |
        sudo apt-get update
        sudo apt-get install libcurl4-openssl-dev libelf-dev libdw-dev cmake gcc binutils-dev libiberty-dev
        wget https://github.com/SimonKagstrom/kcov/archive/master.tar.gz
        tar xzf master.tar.gz
        cd kcov-master
        mkdir build
        cd build
        cmake ..
        make
        make install DESTDIR=../../kcov-build
        cd ../..
        rm -rf kcov-master
        echo "Installed kcov"
        for file in target/debug/deps/fend_core-* target/debug/deps/integration_tests-*;
          do [ -x "${file}" ] || continue;
          echo "$file";
          mkdir -p "target/cov/$(basename $file)";
          ./kcov-build/usr/local/bin/kcov --exclude-pattern=/.cargo,/usr/lib --verify "target/cov/$(basename $file)" "$file";
        done
        bash <(curl -vs --retry 10 --connect-timeout 30 https://codecov.io/bash)
        echo "Uploaded code coverage"
